Imágenes en Laravel

1. Modificar la constante 'FILESYSTEM_DISK' en el archivo 'filesystems.php' en el directorio 'config'. Establecerla en 'public'.

2. Verificar la creación del campo correspondiente en el archivo de migraciones para almacenar la url de la imágen.

3. Si se requieren datos de prueba, establecer apropiadamente en el 'Factory' los parámetros que recibe 'Faker', así:
   'image' => fake()->image('public/storage/post', 640, 480, null, true); 
   'image' => 'posts/' . fake()->image('public/storage/post', 640, 480, null, false);

4. Crear el directorio 'posts', donde se almacenarán las imágenes, ya que 'Faker' no tiene la capacidad de crearlo. Para esto,
   en el el archivo 'DatabaseSeeder.php' se deberá incluir lo siguiente, dentro del método 'run()':
   en primera instancia, se deberá llamar al 'Facade' 'Storage' use Illuminate\Support\Facades\Storage; y así poder utilizar sus 
   métodos 'deleteDirectory()' y 'makeDirectory()' para borrar, si existe y, crear, respectivamente, dicho directorio.
   Storage::deleteDirectory('posts');
   Storage::makeDirectory('posts');

5. Luego de esto se debe ejecutar en consola, el comando: 'php artisan storage:link' para que se cree el enlace directo desde
   la carpeta 'public' hacia la ruta 'app/storage/public', que es donde se almacenan los archivos por defecto.

6. ahora se deben de correr las migraciones. Todo debería de estar yendo bien hasta este punto.

7. Para cargar una imágen desde un formulario en 'Livewire' se deberá llamar, en primer lugar, al 'Trait' 'WithFileUploads' dentro de la clase del componente de 'Livewire', así:
   'use Livewire/WithFileUploads'. Obviamente, luego de esto, debemos hacer uso de éste dentro del componente, así: 
   'use WithFileUploads;'. Y después de esto, se debe definir una propiedad publica, que servirá para almacenar la imagen en cuestión.

8. Ahora debemos ir a la vista del componente y crear un input de tipo 'file' y especificar que queremos que esté sincronizado con la propiedad 'image'
   que se creó en la clase de dicho componente. Así: <input type="file" wire:model="image">. Con esto, cualquier imágen que nosotros carguemos se almacenará en la propiedad 'image'.

9. Luego de esto, debemos modificar nuestras reglas de validación, donde se deberán incluir las que estipulemos para nuestras imágenes. Por ejemplo:
   'protected $rules = ['image' => 'required | 'image' | max:2048];'. Luego, en nuestra vista, pondremos la regla de validación respectiva, debajo del input de la imágen.

10. Ahora, sería óptimo recuperar la url temporal de la imágen, con el fin de permitirle a los usuarios, una previsualización de las imágenes que deseen subir al servidor.
    Para esto, debemos hacer una validación en la parte de la vista donde nosotros queremos mostrar la imagen. Así:
    '@if($image)
      <img src="{{$image->temporaryUrl()}}" alt="Image">
    @endif

11. En este punto podríamos gestionar, por medio de un mensaje o una alerta, el tiempo de carga de la imágen. Por ejemplo:
    <div wire:loading wire:target="image">
      <p>Espere mientras la imágen se procesa...</p>
    </div>
    Adicional a esto, también se podría deshabilitar el botón de 'add' o 'guardar', mientras la imágen se sube.

12. 